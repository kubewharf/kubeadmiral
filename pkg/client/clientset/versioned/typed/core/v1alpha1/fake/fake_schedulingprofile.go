// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/kubewharf/kubeadmiral/pkg/apis/core/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSchedulingProfiles implements SchedulingProfileInterface
type FakeSchedulingProfiles struct {
	Fake *FakeCoreV1alpha1
}

var schedulingprofilesResource = schema.GroupVersionResource{Group: "core.kubeadmiral.io", Version: "v1alpha1", Resource: "schedulingprofiles"}

var schedulingprofilesKind = schema.GroupVersionKind{Group: "core.kubeadmiral.io", Version: "v1alpha1", Kind: "SchedulingProfile"}

// Get takes name of the schedulingProfile, and returns the corresponding schedulingProfile object, and an error if there is any.
func (c *FakeSchedulingProfiles) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.SchedulingProfile, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(schedulingprofilesResource, name), &v1alpha1.SchedulingProfile{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SchedulingProfile), err
}

// List takes label and field selectors, and returns the list of SchedulingProfiles that match those selectors.
func (c *FakeSchedulingProfiles) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.SchedulingProfileList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(schedulingprofilesResource, schedulingprofilesKind, opts), &v1alpha1.SchedulingProfileList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.SchedulingProfileList{ListMeta: obj.(*v1alpha1.SchedulingProfileList).ListMeta}
	for _, item := range obj.(*v1alpha1.SchedulingProfileList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested schedulingProfiles.
func (c *FakeSchedulingProfiles) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(schedulingprofilesResource, opts))
}

// Create takes the representation of a schedulingProfile and creates it.  Returns the server's representation of the schedulingProfile, and an error, if there is any.
func (c *FakeSchedulingProfiles) Create(ctx context.Context, schedulingProfile *v1alpha1.SchedulingProfile, opts v1.CreateOptions) (result *v1alpha1.SchedulingProfile, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(schedulingprofilesResource, schedulingProfile), &v1alpha1.SchedulingProfile{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SchedulingProfile), err
}

// Update takes the representation of a schedulingProfile and updates it. Returns the server's representation of the schedulingProfile, and an error, if there is any.
func (c *FakeSchedulingProfiles) Update(ctx context.Context, schedulingProfile *v1alpha1.SchedulingProfile, opts v1.UpdateOptions) (result *v1alpha1.SchedulingProfile, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(schedulingprofilesResource, schedulingProfile), &v1alpha1.SchedulingProfile{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SchedulingProfile), err
}

// Delete takes name of the schedulingProfile and deletes it. Returns an error if one occurs.
func (c *FakeSchedulingProfiles) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(schedulingprofilesResource, name, opts), &v1alpha1.SchedulingProfile{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSchedulingProfiles) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(schedulingprofilesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.SchedulingProfileList{})
	return err
}

// Patch applies the patch and returns the patched schedulingProfile.
func (c *FakeSchedulingProfiles) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.SchedulingProfile, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(schedulingprofilesResource, name, pt, data, subresources...), &v1alpha1.SchedulingProfile{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SchedulingProfile), err
}
